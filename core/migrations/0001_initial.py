# Generated by Django 5.2.2 on 2025-06-09 13:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Occasion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('color', models.CharField(default='#f59e0b', max_length=7)),
                ('is_recurring', models.BooleanField(default=False)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'مناسبت',
                'verbose_name_plural': 'مناسبت\u200cها',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField()),
                ('monthly_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('yearly_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('yearly_discount_percentage', models.PositiveIntegerField(default=0)),
                ('max_wishlists', models.PositiveIntegerField(default=5)),
                ('max_items_per_wishlist', models.PositiveIntegerField(default=50)),
                ('max_image_uploads', models.PositiveIntegerField(default=100)),
                ('can_use_custom_domains', models.BooleanField(default=False)),
                ('can_export_data', models.BooleanField(default=False)),
                ('priority_support', models.BooleanField(default=False)),
                ('advanced_analytics', models.BooleanField(default=False)),
                ('color', models.CharField(default='#6366f1', max_length=7)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('is_popular', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'طرح اشتراک',
                'verbose_name_plural': 'طرح\u200cهای اشتراک',
                'ordering': ['sort_order', 'monthly_price'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('color', models.CharField(default='#64748b', max_length=7)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'برچسب',
                'verbose_name_plural': 'برچسب\u200cها',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('wallet_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_visibility', models.CharField(choices=[('PUBLIC', 'عمومی'), ('FRIENDS', 'دوستان'), ('PRIVATE', 'خصوصی')], default='PUBLIC', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'کاربر',
                'verbose_name_plural': 'کاربران',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('color', models.CharField(default='#6366f1', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.category')),
            ],
            options={
                'verbose_name': 'دسته\u200cبندی',
                'verbose_name_plural': 'دسته\u200cبندی\u200cها',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('message', models.TextField(blank=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('guest_name', models.CharField(blank=True, max_length=100)),
                ('guest_email', models.EmailField(blank=True, max_length=254)),
                ('status', models.CharField(choices=[('PENDING', 'در انتظار'), ('COMPLETED', 'تکمیل شده'), ('FAILED', 'ناموفق'), ('REFUNDED', 'بازگشت داده شده')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('contributor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contributions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'کمک',
                'verbose_name_plural': 'کمک\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('followed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers_set', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'دنبال کردن',
                'verbose_name_plural': 'دنبال کردن\u200cها',
                'unique_together': {('follower', 'followed')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='followers',
            field=models.ManyToManyField(blank=True, related_name='following', through='core.UserFollow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField()),
                ('auto_renew', models.BooleanField(default=True)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('last_payment_date', models.DateTimeField(blank=True, null=True)),
                ('next_payment_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.subscriptionplan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'اشتراک کاربر',
                'verbose_name_plural': 'اشتراک\u200cهای کاربران',
            },
        ),
        migrations.CreateModel(
            name='WalletTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('DEPOSIT', 'واریز'), ('WITHDRAW', 'برداشت'), ('CONTRIBUTION', 'کمک'), ('REFUND', 'بازگشت وجه'), ('PURCHASE', 'خرید'), ('BONUS', 'جایزه')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('status', models.CharField(choices=[('PENDING', 'در انتظار'), ('COMPLETED', 'تکمیل شده'), ('FAILED', 'ناموفق'), ('CANCELLED', 'لغو شده')], default='PENDING', max_length=20)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('related_contribution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.contribution')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'تراکنش کیف پول',
                'verbose_name_plural': 'تراکنش\u200cهای کیف پول',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='contribution',
            name='wallet_transaction',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.wallettransaction'),
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('occasion_date', models.DateField(blank=True, null=True)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'عمومی'), ('UNLISTED', 'با لینک'), ('FRIENDS', 'دوستان'), ('PRIVATE', 'خصوصی')], default='PUBLIC', max_length=20)),
                ('allow_contributions', models.BooleanField(default=True)),
                ('allow_anonymous_contributions', models.BooleanField(default=True)),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='wishlists/')),
                ('theme_color', models.CharField(default='#6366f1', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('share_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('occasion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.occasion')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'لیست آرزو',
                'verbose_name_plural': 'لیست\u200cهای آرزو',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WishlistItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('contributed_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('product_url', models.URLField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='items/')),
                ('brand', models.CharField(blank=True, max_length=100)),
                ('model', models.CharField(blank=True, max_length=100)),
                ('priority', models.PositiveSmallIntegerField(default=3, help_text='1=کم، 5=زیاد', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('status', models.CharField(choices=[('ACTIVE', 'فعال'), ('RESERVED', 'رزرو شده'), ('PURCHASED', 'خریداری شده'), ('RECEIVED', 'دریافت شده'), ('CANCELLED', 'لغو شده')], default='ACTIVE', max_length=20)),
                ('purchased_at', models.DateTimeField(blank=True, null=True)),
                ('purchase_notes', models.TextField(blank=True)),
                ('external_ids', models.JSONField(blank=True, default=dict)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
                ('purchased_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchased_items', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='core.tag')),
                ('wishlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.wishlist')),
            ],
            options={
                'verbose_name': 'آیتم آرزو',
                'verbose_name_plural': 'آیتم\u200cهای آرزو',
                'ordering': ['sort_order', '-priority', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='wallettransaction',
            name='related_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.wishlistitem'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default='اعلان', max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('CONTRIBUTION', 'کمک جدید'), ('WISHLIST_COMPLETE', 'تکمیل لیست آرزو'), ('ITEM_PURCHASED', 'خرید آیتم'), ('FOLLOWER_NEW', 'دنبال\u200cکننده جدید'), ('OCCASION_REMINDER', 'یادآوری مناسبت'), ('SUBSCRIPTION_EXPIRY', 'انقضای اشتراک'), ('SYSTEM', 'سیستم')], default='SYSTEM', max_length=30)),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('send_push', models.BooleanField(default=True)),
                ('send_email', models.BooleanField(default=False)),
                ('send_sms', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='triggered_notifications', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('related_wishlist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.wishlist')),
                ('related_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.wishlistitem')),
            ],
            options={
                'verbose_name': 'اعلان',
                'verbose_name_plural': 'اعلان\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='contribution',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='core.wishlistitem'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['slug'], name='core_wishli_slug_5136b1_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['owner', 'is_active'], name='core_wishli_owner_i_b95dfd_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['visibility', 'is_active'], name='core_wishli_visibil_15dea8_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlistitem',
            index=models.Index(fields=['wishlist', 'status'], name='core_wishli_wishlis_249c53_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlistitem',
            index=models.Index(fields=['status', 'priority'], name='core_wishli_status_84e325_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['user', 'status'], name='core_wallet_user_id_4910cf_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['transaction_type', 'status'], name='core_wallet_transac_1978fb_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read'], name='core_notifi_user_id_cb8f07_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type', 'is_sent'], name='core_notifi_notific_42b753_idx'),
        ),
        migrations.AddIndex(
            model_name='contribution',
            index=models.Index(fields=['item', 'status'], name='core_contri_item_id_1cdac5_idx'),
        ),
        migrations.AddIndex(
            model_name='contribution',
            index=models.Index(fields=['contributor', 'status'], name='core_contri_contrib_bf3259_idx'),
        ),
    ]
